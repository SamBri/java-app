/*
 * This file is generated by jOOQ.
 */
package com.app.jooq.tables;


import com.app.jooq.JavaApp;
import com.app.jooq.Keys;
import com.app.jooq.tables.records.ApplicationCursorsRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ApplicationCursors extends TableImpl<ApplicationCursorsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>java_app.application_cursors</code>
     */
    public static final ApplicationCursors APPLICATION_CURSORS = new ApplicationCursors();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApplicationCursorsRecord> getRecordType() {
        return ApplicationCursorsRecord.class;
    }

    /**
     * The column <code>java_app.application_cursors.id</code>.
     */
    public final TableField<ApplicationCursorsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>java_app.application_cursors.pos_x</code>.
     */
    public final TableField<ApplicationCursorsRecord, Integer> POS_X = createField(DSL.name("pos_x"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>java_app.application_cursors.pos_y</code>.
     */
    public final TableField<ApplicationCursorsRecord, Integer> POS_Y = createField(DSL.name("pos_y"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>java_app.application_cursors.nonce</code>.
     */
    public final TableField<ApplicationCursorsRecord, String> NONCE = createField(DSL.name("nonce"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>java_app.application_cursors.cursor_id</code>.
     */
    public final TableField<ApplicationCursorsRecord, String> CURSOR_ID = createField(DSL.name("cursor_id"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>java_app.application_cursors.name</code>.
     */
    public final TableField<ApplicationCursorsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    private ApplicationCursors(Name alias, Table<ApplicationCursorsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ApplicationCursors(Name alias, Table<ApplicationCursorsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>java_app.application_cursors</code> table
     * reference
     */
    public ApplicationCursors(String alias) {
        this(DSL.name(alias), APPLICATION_CURSORS);
    }

    /**
     * Create an aliased <code>java_app.application_cursors</code> table
     * reference
     */
    public ApplicationCursors(Name alias) {
        this(alias, APPLICATION_CURSORS);
    }

    /**
     * Create a <code>java_app.application_cursors</code> table reference
     */
    public ApplicationCursors() {
        this(DSL.name("application_cursors"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JavaApp.JAVA_APP;
    }

    @Override
    public Identity<ApplicationCursorsRecord, Integer> getIdentity() {
        return (Identity<ApplicationCursorsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ApplicationCursorsRecord> getPrimaryKey() {
        return Keys.KEY_APPLICATION_CURSORS_PRIMARY;
    }

    @Override
    public ApplicationCursors as(String alias) {
        return new ApplicationCursors(DSL.name(alias), this);
    }

    @Override
    public ApplicationCursors as(Name alias) {
        return new ApplicationCursors(alias, this);
    }

    @Override
    public ApplicationCursors as(Table<?> alias) {
        return new ApplicationCursors(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApplicationCursors rename(String name) {
        return new ApplicationCursors(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApplicationCursors rename(Name name) {
        return new ApplicationCursors(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApplicationCursors rename(Table<?> name) {
        return new ApplicationCursors(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApplicationCursors where(Condition condition) {
        return new ApplicationCursors(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApplicationCursors where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApplicationCursors where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApplicationCursors where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApplicationCursors where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApplicationCursors where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApplicationCursors where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ApplicationCursors where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApplicationCursors whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ApplicationCursors whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
